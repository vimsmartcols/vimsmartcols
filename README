" vimsmartcols
"
" vim global plugin for smart columns
" 
" v0.19
"
" Bo Waggoner
" vimsmartcols@gmail.com
" https://github.com/vimsmartcols/vimsmartcols
" Modified: 2012-06-17
" 
" This software is free.
"
" --------------------------------------

" Install:
" 1. put this file in directory ~/.vim/plugins
"    (creating it if necessary), or whichever plugin folder.
" 2. Change the following settings and keymappings to suit
"    your preference, if you want.

" the minimum number of spaces separating columns
let g:smartcolsep = 2

" when aligning, allow skipping this many rows
let g:smartcolskip = 1


:nmap <C-l>      :call Movecol(1)<CR>
:nmap <C-h>      :call Movecol(-1)<CR>
:nmap <S-l>      :call Indentcol(1)<CR>
:nmap <S-h>      :call Indentcol(-1)<CR>
:nmap <TAB>      :call Indentcol(&tabstop)<CR>
:nmap <S-TAB>    :call Indentcol(-&tabstop)<CR>
:nmap >          :call Matchcol(1)<CR>
:nmap <          :call Matchcol(-1)<CR>

:imap <S-TAB>    <C-R>=Matchcol(1)<CR>


"---------------------------------------
"
" Summary
" Anything separated by g:smartcolsep spaces or more is a 'column'.
" Columns span vertically as many lines as they are continued unbroken,
" subject to the following:
"   -- a column can skip over at most g:smartcolskip lines total.
"   -- not included in the above, the function Canskirow() details when
"      a row may be skipped for free. (Example: comment lines in C/C++.)
"   -- overriding the above, a column cannot span past an unskippable
"      row as defined in Cannotskiprow(). (Example: { or } in C/C++).
"
" Normal mode:  Ctrl-l      moves cursor one column to the right
"               Ctrl-h      moves cursor one column to the left
"               Shift-l     push entire column right
"               Shift-h     push entire column left
"               Tab         push entire column right one tabstop length
"               Shift-Tab   push entire column left one tabstop length
"               >           push current position right to match columns nearby
"               <           push current position left to match columns nearby
"
" Insert mode:  Shift-Tab   pushes current position right to match columns nearby
"
"---------------------------------------
" 
" Example (movement):
"   let  x  =  17
" Put cursor on beginning of line and press Ctrl-l. This moves one column to
" the right.Now cursor is on 'l' in let. Press Ctrl-l again; now on 'x'.
" Press Ctrl-h; now on 'l' again.
" 
" Example (pushing columns):
"   let  x  =  17
"   let  y  =  22
" Put cursor on either '=' and press Shift-l. This pushes the entire column
" right one space. Result:
"   let  x   =  17
"   let  y   =  22
" Pressing Shift-h will push it back to the left.
"
" Example (matching columns):
"   let  x         =  17
"   let y =  22
" Put cursor on '=' in second line and press >. This pushs the equals sign
" to the nearest surrounding column on the right. Result:
"   let  x         =  17
"   let y          =  22
" 
" Example (insert mode):
"   let  x         = 17
"   let  y
" Put cursor on 'y' and press a to enter insert mode. Now press Shift-Tab;
" this moves the cursor rightward to the nearest surrounding column. Type =.
"   let  x         = 17
"   let  y         =
"
"----------------------------------------

